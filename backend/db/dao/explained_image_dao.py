from typing import List, Optional

from fastapi import Depends
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from backend.db.dependencies import get_db_session
from backend.db.models.explained_image_model import ExplainedImageModel
from backend.models.explained_image import ExplainedImage


class ExplainedImageDAO:
    """Class for accessing the explained_images table."""

    def __init__(self, session: AsyncSession = Depends(get_db_session)):
        self.session = session

    async def create_explained_image(
        self,
        image: str,
        comment: str,
        date: str,
        latitude: str,
        longitude: str,
        altitude: str,
        location: str,
        direction: str,
        ai_comment: str,
        ai_comment_vector: List[float],
        organization_id: int,
    ) -> None:
        """
        Add single explained image to session.

        :param image: URL or identifier of the image.
        :param comment: Optional comment about the image.
        :param date: Optional date associated with the image.
        :param latitude: Optional latitude where the image was taken.
        :param longitude: Optional longitude where the image was taken.
        :param altitude: Optional altitude where the image was taken.
        :param location: Optional location information.
        :param direction: Optional direction information.
        :param ai_comment: Optional comment generated by AI.
        :param ai_comment_vector: Optional vector representation of the AI comment.
        """


        explained_image = ExplainedImageModel(
            image="https://i.redd.it/ojna3hgcsfa51.jpg",
            comment=comment,
            date=date,
            latitude=latitude,
            longitude=longitude,
            altitude=altitude,
            location=location,
            direction=direction,
            ai_comment=ai_comment,
            ai_comment_vector=ai_comment_vector,
        )
        self.session.add(explained_image)

    async def get_all_explained_images(
        self,
    ) -> List[ExplainedImageModel]:
        """
        Get all explained image models with limit/offset pagination.

        :param limit: limit of explained images.
        :param offset: offset of explained images.
        :return: stream of explained images.
        """
        raw_explained_images = await self.session.execute(
            select(ExplainedImageModel)
        )

        return list(raw_explained_images.scalars().fetchall())

    async def get_explained_image_by_id(
        self,
        id: int,
    ) -> ExplainedImageModel:
        """
        Get specific explained image model.

        :param id: ID of the image.
        :return: explained image model.
        """
        query = select(ExplainedImageModel).where(ExplainedImageModel.id == id)
        row = await self.session.execute(query)
        return row.scalars().first()

    async def filter(
        self,
        image: Optional[str] = None,
        comment: Optional[str] = None,
    ) -> List[ExplainedImageModel]:
        """
        Get specific explained image model.

        :param image: URL or identifier of the image.
        :param comment: Comment associated with the image.
        :return: explained image models.
        """
        query = select(ExplainedImageModel)
        if image:
            query = query.where(ExplainedImageModel.image == image)
        if comment:
            query = query.where(ExplainedImageModel.comment == comment)
        rows = await self.session.execute(query)
        return list(rows.scalars().fetchall())

    async def similarity_search(
        self,
        vector: List[float],
        limit: int = 1,
    ) -> List[ExplainedImageModel]:
        """
        Get similar explained image models.

        :param vector: Vector representation of the image.
        :param limit: limit of explained images.
        :return: explained image models.
        """
        result = await self.session.scalars(
            select(ExplainedImageModel).order_by(
                ExplainedImageModel.ai_comment_vector.l2_distance(vector)
            ),
        )
        return result.fetchmany(limit)
